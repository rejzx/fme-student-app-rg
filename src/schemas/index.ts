import * as z from "zod";

export const LoginSchema = z.object({
  email: z.string().email({
    message: "Email is required",
  }),
  password: z.string().min(1, {
    message: "Password is required",
  }),
  code: z.optional(z.string()),
});

export const RegisterSchema = z.object({
  email: z.string().email({ message: "Email is required" }),
  password: z.string().min(1, { message: "Minimum 6 characters required" }),
  firstname: z.string().min(1, { message: "Firstname is required" }),
  surname: z.string().min(1, { message: "Surname is required" }),
  confirmPassword: z.string()
}).refine((data) => data.password === data.confirmPassword, {
  message: "Passwords don't match",
  path: ["confirmPassword"], // This makes sure the error message appears under the confirmPassword field
});

export const EducationSchema = z.object({
  id: z.string().optional(),
  degree: z.string(),
  institution: z.string(),
  yearOfGraduation: z.number()
});

export const WorkExperienceSchema = z.object({
  id: z.string().optional(),
  company: z.string(),
  position: z.string(),
  location: z.string(),
  startDate: z.string(),
  endDate: z.string(),
});

export const SkillSchema = z.object({
  id: z.string().optional(),
  skillName: z.string(),
  level: z.string()
});

export const StudentPostSchema = z.object({
  id: z.string().optional(),  // `id` is optional because it is auto-generated by Prisma upon creation
  content: z.string(),
  isActive: z.boolean(),
  education: z.array(EducationSchema).optional(),
  workExperiences: z.array(WorkExperienceSchema).optional(),
  skills: z.array(SkillSchema).optional(),
  createdAt: z.date().optional(),  // `createdAt` and `updatedAt` are auto-set by Prisma, so they should be optional in Zod
  updatedAt: z.date().optional(),
  studentId: z.string().optional(), // `studentId` might be optional depending on whether you're creating a new post or editing an existing one
});

const CompanySchema = z.object({
  id: z.string(),
  name: z.string().nullable(),
  email: z.string().email(),
  password: z.string(),
  image: z.string().nullable(),
});

const PostSchema = z.object({
  id: z.string(),
  content: z.string(),
  isActive: z.boolean(),
  createdAt: z.date(),
  updatedAt: z.date(),
  studentId: z.string(),
});

export const MessageSchema = z.object({
  id: z.string(),
  content: z.string(),
  viewed: z.boolean(),
  createdAt: z.date(),
  company: CompanySchema,
  post: PostSchema,
});